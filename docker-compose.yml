services:
  # Python MCP Orchestrator
  mcp-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.python
    container_name: ruvscan-mcp
    ports:
      - "8000:8000"
    environment:
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RUST_ENGINE_HOST=rust-engine
      - RUST_ENGINE_PORT=50051
      - DATABASE_TYPE=sqlite
      - SQLITE_PATH=/data/ruvscan.db
    volumes:
      - ./data:/data
      - ./logs:/app/logs
      - ./config:/app/config
    # depends_on:
    #   - rust-engine  # Disabled: Rust engine not working yet
    networks:
      - ruvscan-network
    restart: unless-stopped

  # Rust Sublinear Engine (DISABLED - Not Critical for MVP)
  # The Rust engine provides O(log n) performance optimizations but is not
  # required for basic functionality. Currently disabled due to binary
  # initialization issue. See docs/RUST_ENGINE_STATUS.md for details.
  #
  # To enable for debugging: docker compose --profile rust-debug up
  rust-engine:
    build:
      context: .
      dockerfile: docker/Dockerfile.rust
    container_name: ruvscan-rust
    ports:
      - "50051:50051"
    environment:
      - RUST_LOG=info
    networks:
      - ruvscan-network
    restart: "no"  # Disabled: Binary exits immediately
    profiles:
      - rust-debug  # Only start when explicitly requested

  # Go Scanner Workers
  scanner:
    build:
      context: .
      dockerfile: docker/Dockerfile.go
    container_name: ruvscan-scanner
    ports:
      - "8081:8080"
    environment:
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - SCANNER_MODE=server
      - SCANNER_PORT=8080
      - RUVSCAN_MCP_ENDPOINT=http://mcp-server:8000/ingest
    depends_on:
      - mcp-server
    networks:
      - ruvscan-network
    restart: unless-stopped

networks:
  ruvscan-network:
    driver: bridge

volumes:
  ruvscan-data:
